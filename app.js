const { createBot, createProvider, createFlow, addKeyword } = require('@bot-whatsapp/bot');
const QRPortalWeb = require('@bot-whatsapp/portal');
const BaileysProvider = require('@bot-whatsapp/provider/baileys');
const MockAdapter = require('@bot-whatsapp/database/mock');

// Informaci√≥n del evento
const eventDetails = `
üìÖ *NOVENO NIVEL*
üìç Direcci√≥n: Av. Nuevo M√©xico 112, San Jer√≥nimo Xonacahuac√°n, Tec√°mac, Edomex.
üí≤ Costo del evento: $80 antes del evento, $100 el d√≠a del evento.
üóì Fecha: 02 de Noviembre, Apertura de puertas a las 15:00 hrs.

üé∂ *Participaci√≥n de:*
- üé∏ SHD Tributo a H√©roes del Silencio.
- üé§ Holkan Mictlan.
- üéß Ni√±o Voltio.
- ü•Å The Vshes.
- üé∏ One Last Ride (Tributo a Metallica).
- üé§ VLV (Tributo a DLD).
- ü™ï El Reboso de la Abuela.
- üé∑ La Roo-ska.
- üé∏ Vulva.
- üé∏ Desierto Seven.

üç¥ Adem√°s de m√∫sica en vivo, habr√° gastronom√≠a local y artesan√≠as.
`;

// Flujo para la compra de boletos y manejo del c√°lculo de pago
const flowBoletos = addKeyword(['boletos', 'comprar boletos'])
  .addAnswer(
    ['üé´ ¬øCu√°ntos boletos deseas comprar? (Por favor, ingresa un n√∫mero del 1 al 10)'],
    { capture: true },
    async (ctx, { flowDynamic }) => {
      const numTickets = parseInt(ctx.body.trim());

      if (isNaN(numTickets) || numTickets < 1 || numTickets > 10) {
        await flowDynamic('‚ùå Por favor, ingresa un n√∫mero v√°lido entre 1 y 10.');
        return;
      }

      // Aseguramos que ctx.flow y ctx.flow.state est√©n inicializados
      ctx.flow = ctx.flow || {};
      ctx.flow.state = ctx.flow.state || {};

      ctx.flow.state.numTickets = numTickets;

      const costoPorBoletoAnticipado = 80;
      const costoPorBoletoDiaEvento = 100;
      const costoTotalAnticipado = numTickets * costoPorBoletoAnticipado;
      const costoTotalDiaEvento = numTickets * costoPorBoletoDiaEvento;

      await flowDynamic([
        `‚úÖ Has seleccionado ${numTickets} boleto(s).`,
        `üí≤ El costo es de $${costoTotalAnticipado} antes del evento o $${costoTotalDiaEvento} el d√≠a del evento.`,
      ]);

      // Enviar los datos de pago de manera inmediata
      await flowDynamic([
        'üîÑ Aqu√≠ tienes los datos para realizar el pago:',
        'üè¶ *Transferencia Bancaria*: Banco XYZ, CLABE 1234567890',
        'üí≥ Tambi√©n puedes pagar con tarjeta en el siguiente enlace:',
        'üîó [Pagar con Tarjeta](https://tarjeta.com)',
        '\nüì∏ Despu√©s de realizar el pago, por favor env√≠a cualquier archivo o imagen para continuar.',
      ]);
    }
  )
  .addAnswer(
    ['(.*)'], // Usamos una expresi√≥n regular para capturar cualquier mensaje
    { capture: true, media: true, send: false }, // No enviamos el patr√≥n como mensaje
    async (ctx, { flowDynamic }) => {
      console.log('Archivo recibido:', ctx.body, ctx.media); // Verificaci√≥n en consola

      // Aseguramos que ctx.flow y ctx.flow.state est√©n inicializados
      ctx.flow = ctx.flow || {};
      ctx.flow.state = ctx.flow.state || {};

      // Continuamos el flujo sin importar el tipo de mensaje o medio recibido
      await flowDynamic('‚è≥ El pago se est√° validando y puede tardar hasta 24 horas.');

      // Solicitamos el correo electr√≥nico
      await flowDynamic('üìß Por favor, proporciona tu *correo electr√≥nico* para confirmar tu reservaci√≥n.');
    }
  )
  .addAnswer(
    ['(.*)'],
    { capture: true, send: false },
    async (ctx, { flowDynamic }) => {
      // Aseguramos que ctx.flow y ctx.flow.state est√©n inicializados
      ctx.flow = ctx.flow || {};
      ctx.flow.state = ctx.flow.state || {};

      const email = ctx.body.trim();
      ctx.flow.state.email = email;

      // Solicitamos el nombre completo
      await flowDynamic('üìù Ahora, por favor, proporciona tu *nombre completo* para la reservaci√≥n.');
    }
  )
  .addAnswer(
    ['(.*)'],
    { capture: true, send: false },
    async (ctx, { flowDynamic }) => {
      // Aseguramos que ctx.flow y ctx.flow.state est√©n inicializados
      ctx.flow = ctx.flow || {};
      ctx.flow.state = ctx.flow.state || {};

      const fullName = ctx.body.trim();
      ctx.flow.state.fullName = fullName;

      // Mostrar el mensaje final seg√∫n lo solicitado
      await flowDynamic([
        'üéâ Agradecemos mucho tu compra, tu pago se est√° validando con nuestros asesores, en 24 horas enviaremos los boletos digitales adquiridos al correo indicado.',
        'Si tienes dudas, comentarios o bien, deseas una atenci√≥n personalizada comun√≠cate al 771-316-9532.',
        '\nüëâ Escribe *hola* para regresar al inicio.'
      ]);
    }
  );

// Flujo para obtener la informaci√≥n del evento
const flowEvento = addKeyword(['evento', 'informacion del evento']).addAnswer(
  [
    eventDetails,
    '\nüëâ *boletos* para comprar boletos.',
    '\nüëâ *hola* para regresar al men√∫ principal.',
  ]
);

// Flujo principal que ofrece las opciones "comprar boletos" e "informaci√≥n del evento"
const flowPrincipal = addKeyword(['hola', 'ole', 'alo'])
  .addAnswer(
    'üôå ¬°Hola! Mi nombre es Xolito. Bienvenido a *Noveno Nivel*! üéâ ¬øC√≥mo podemos ayudarte hoy?'
  )
  .addAnswer(
    [
      'üìã Escribe una de las siguientes opciones para continuar:',
      'üëâ *boletos* para comprar boletos üé´',
      'üëâ *evento* para obtener m√°s informaci√≥n del evento *NOVENO NIVEL* üìÖ',
    ],
    null,
    null,
    [flowBoletos, flowEvento]
  );

// Inicializaci√≥n del bot con los flujos configurados
const main = async () => {
  const adapterDB = new MockAdapter();
  const adapterFlow = createFlow([flowPrincipal, flowBoletos, flowEvento]);
  const adapterProvider = createProvider(BaileysProvider);

  createBot({
    flow: adapterFlow,
    provider: adapterProvider,
    database: adapterDB,
  });

  QRPortalWeb(); // Genera el c√≥digo QR para la vinculaci√≥n con WhatsApp
};

main();
